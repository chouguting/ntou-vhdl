// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2021 15:35:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    clk_with_number
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clk_with_number_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module clk_with_number_vlg_check_tst (
	decoded_out,
	onesec_out,
	temp,
	sampler_rx
);
input [7:0] decoded_out;
input [9:0] onesec_out;
input  temp;
input sampler_rx;

reg [7:0] decoded_out_expected;
reg [9:0] onesec_out_expected;
reg  temp_expected;

reg [7:0] decoded_out_prev;
reg [9:0] onesec_out_prev;
reg  temp_prev;

reg [7:0] decoded_out_expected_prev;
reg [9:0] onesec_out_expected_prev;
reg  temp_expected_prev;

reg [7:0] last_decoded_out_exp;
reg [9:0] last_onesec_out_exp;
reg  last_temp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	decoded_out_prev = decoded_out;
	onesec_out_prev = onesec_out;
	temp_prev = temp;
end

// update expected /o prevs

always @(trigger)
begin
	decoded_out_expected_prev = decoded_out_expected;
	onesec_out_expected_prev = onesec_out_expected;
	temp_expected_prev = temp_expected;
end


// expected decoded_out[ 7 ]
initial
begin
	decoded_out_expected[7] = 1'bX;
end 
// expected decoded_out[ 6 ]
initial
begin
	decoded_out_expected[6] = 1'bX;
end 
// expected decoded_out[ 5 ]
initial
begin
	decoded_out_expected[5] = 1'bX;
end 
// expected decoded_out[ 4 ]
initial
begin
	decoded_out_expected[4] = 1'bX;
end 
// expected decoded_out[ 3 ]
initial
begin
	decoded_out_expected[3] = 1'bX;
end 
// expected decoded_out[ 2 ]
initial
begin
	decoded_out_expected[2] = 1'bX;
end 
// expected decoded_out[ 1 ]
initial
begin
	decoded_out_expected[1] = 1'bX;
end 
// expected decoded_out[ 0 ]
initial
begin
	decoded_out_expected[0] = 1'bX;
end 
// expected onesec_out[ 9 ]
initial
begin
	onesec_out_expected[9] = 1'bX;
end 
// expected onesec_out[ 8 ]
initial
begin
	onesec_out_expected[8] = 1'bX;
end 
// expected onesec_out[ 7 ]
initial
begin
	onesec_out_expected[7] = 1'bX;
end 
// expected onesec_out[ 6 ]
initial
begin
	onesec_out_expected[6] = 1'bX;
end 
// expected onesec_out[ 5 ]
initial
begin
	onesec_out_expected[5] = 1'bX;
end 
// expected onesec_out[ 4 ]
initial
begin
	onesec_out_expected[4] = 1'bX;
end 
// expected onesec_out[ 3 ]
initial
begin
	onesec_out_expected[3] = 1'bX;
end 
// expected onesec_out[ 2 ]
initial
begin
	onesec_out_expected[2] = 1'bX;
end 
// expected onesec_out[ 1 ]
initial
begin
	onesec_out_expected[1] = 1'bX;
end 
// expected onesec_out[ 0 ]
initial
begin
	onesec_out_expected[0] = 1'bX;
end 

// expected temp
initial
begin
	temp_expected = 1'bX;
end 
// generate trigger
always @(decoded_out_expected or decoded_out or onesec_out_expected or onesec_out or temp_expected or temp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected decoded_out = %b | expected onesec_out = %b | expected temp = %b | ",decoded_out_expected_prev,onesec_out_expected_prev,temp_expected_prev);
	$display("| real decoded_out = %b | real onesec_out = %b | real temp = %b | ",decoded_out_prev,onesec_out_prev,temp_prev);
`endif
	if (
		( decoded_out_expected_prev[0] !== 1'bx ) && ( decoded_out_prev[0] !== decoded_out_expected_prev[0] )
		&& ((decoded_out_expected_prev[0] !== last_decoded_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[0] = decoded_out_expected_prev[0];
	end
	if (
		( decoded_out_expected_prev[1] !== 1'bx ) && ( decoded_out_prev[1] !== decoded_out_expected_prev[1] )
		&& ((decoded_out_expected_prev[1] !== last_decoded_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[1] = decoded_out_expected_prev[1];
	end
	if (
		( decoded_out_expected_prev[2] !== 1'bx ) && ( decoded_out_prev[2] !== decoded_out_expected_prev[2] )
		&& ((decoded_out_expected_prev[2] !== last_decoded_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[2] = decoded_out_expected_prev[2];
	end
	if (
		( decoded_out_expected_prev[3] !== 1'bx ) && ( decoded_out_prev[3] !== decoded_out_expected_prev[3] )
		&& ((decoded_out_expected_prev[3] !== last_decoded_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[3] = decoded_out_expected_prev[3];
	end
	if (
		( decoded_out_expected_prev[4] !== 1'bx ) && ( decoded_out_prev[4] !== decoded_out_expected_prev[4] )
		&& ((decoded_out_expected_prev[4] !== last_decoded_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[4] = decoded_out_expected_prev[4];
	end
	if (
		( decoded_out_expected_prev[5] !== 1'bx ) && ( decoded_out_prev[5] !== decoded_out_expected_prev[5] )
		&& ((decoded_out_expected_prev[5] !== last_decoded_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[5] = decoded_out_expected_prev[5];
	end
	if (
		( decoded_out_expected_prev[6] !== 1'bx ) && ( decoded_out_prev[6] !== decoded_out_expected_prev[6] )
		&& ((decoded_out_expected_prev[6] !== last_decoded_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[6] = decoded_out_expected_prev[6];
	end
	if (
		( decoded_out_expected_prev[7] !== 1'bx ) && ( decoded_out_prev[7] !== decoded_out_expected_prev[7] )
		&& ((decoded_out_expected_prev[7] !== last_decoded_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decoded_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decoded_out_expected_prev);
		$display ("     Real value = %b", decoded_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_decoded_out_exp[7] = decoded_out_expected_prev[7];
	end
	if (
		( onesec_out_expected_prev[0] !== 1'bx ) && ( onesec_out_prev[0] !== onesec_out_expected_prev[0] )
		&& ((onesec_out_expected_prev[0] !== last_onesec_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[0] = onesec_out_expected_prev[0];
	end
	if (
		( onesec_out_expected_prev[1] !== 1'bx ) && ( onesec_out_prev[1] !== onesec_out_expected_prev[1] )
		&& ((onesec_out_expected_prev[1] !== last_onesec_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[1] = onesec_out_expected_prev[1];
	end
	if (
		( onesec_out_expected_prev[2] !== 1'bx ) && ( onesec_out_prev[2] !== onesec_out_expected_prev[2] )
		&& ((onesec_out_expected_prev[2] !== last_onesec_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[2] = onesec_out_expected_prev[2];
	end
	if (
		( onesec_out_expected_prev[3] !== 1'bx ) && ( onesec_out_prev[3] !== onesec_out_expected_prev[3] )
		&& ((onesec_out_expected_prev[3] !== last_onesec_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[3] = onesec_out_expected_prev[3];
	end
	if (
		( onesec_out_expected_prev[4] !== 1'bx ) && ( onesec_out_prev[4] !== onesec_out_expected_prev[4] )
		&& ((onesec_out_expected_prev[4] !== last_onesec_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[4] = onesec_out_expected_prev[4];
	end
	if (
		( onesec_out_expected_prev[5] !== 1'bx ) && ( onesec_out_prev[5] !== onesec_out_expected_prev[5] )
		&& ((onesec_out_expected_prev[5] !== last_onesec_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[5] = onesec_out_expected_prev[5];
	end
	if (
		( onesec_out_expected_prev[6] !== 1'bx ) && ( onesec_out_prev[6] !== onesec_out_expected_prev[6] )
		&& ((onesec_out_expected_prev[6] !== last_onesec_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[6] = onesec_out_expected_prev[6];
	end
	if (
		( onesec_out_expected_prev[7] !== 1'bx ) && ( onesec_out_prev[7] !== onesec_out_expected_prev[7] )
		&& ((onesec_out_expected_prev[7] !== last_onesec_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[7] = onesec_out_expected_prev[7];
	end
	if (
		( onesec_out_expected_prev[8] !== 1'bx ) && ( onesec_out_prev[8] !== onesec_out_expected_prev[8] )
		&& ((onesec_out_expected_prev[8] !== last_onesec_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[8] = onesec_out_expected_prev[8];
	end
	if (
		( onesec_out_expected_prev[9] !== 1'bx ) && ( onesec_out_prev[9] !== onesec_out_expected_prev[9] )
		&& ((onesec_out_expected_prev[9] !== last_onesec_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesec_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesec_out_expected_prev);
		$display ("     Real value = %b", onesec_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesec_out_exp[9] = onesec_out_expected_prev[9];
	end
	if (
		( temp_expected_prev !== 1'bx ) && ( temp_prev !== temp_expected_prev )
		&& ((temp_expected_prev !== last_temp_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_temp_exp = temp_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module clk_with_number_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [7:0] decoded_out;
wire [9:0] onesec_out;
wire temp;

wire sampler;                             

// assign statements (if any)                          
clk_with_number i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.decoded_out(decoded_out),
	.onesec_out(onesec_out),
	.reset(reset),
	.temp(temp)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50 1'b1;
	#50;
end 

// reset
initial
begin
	reset = 1'b1;
end 

clk_with_number_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

clk_with_number_vlg_check_tst tb_out(
	.decoded_out(decoded_out),
	.onesec_out(onesec_out),
	.temp(temp),
	.sampler_rx(sampler)
);
endmodule

