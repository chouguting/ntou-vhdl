// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2021 20:37:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD_cascading_counter_12bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_cascading_counter_12bit_vlg_sample_tst(
	casin,
	clk,
	reset,
	sampler_tx
);
input  casin;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(casin or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD_cascading_counter_12bit_vlg_check_tst (
	casout,
	count,
	sampler_rx
);
input  casout;
input [11:0] count;
input sampler_rx;

reg  casout_expected;
reg [11:0] count_expected;

reg  casout_prev;
reg [11:0] count_prev;

reg  casout_expected_prev;
reg [11:0] count_expected_prev;

reg  last_casout_exp;
reg [11:0] last_count_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	casout_prev = casout;
	count_prev = count;
end

// update expected /o prevs

always @(trigger)
begin
	casout_expected_prev = casout_expected;
	count_expected_prev = count_expected;
end


// expected count[ 11 ]
initial
begin
	count_expected[11] = 1'bX;
	count_expected[11] = #999000 1'b0;
end 
// expected count[ 10 ]
initial
begin
	count_expected[10] = 1'bX;
	count_expected[10] = #999000 1'b0;
end 
// expected count[ 9 ]
initial
begin
	count_expected[9] = 1'bX;
	count_expected[9] = #999000 1'b0;
end 
// expected count[ 8 ]
initial
begin
	count_expected[8] = 1'bX;
	count_expected[8] = #999000 1'b0;
end 
// expected count[ 7 ]
initial
begin
	count_expected[7] = 1'bX;
	count_expected[7] = #999000 1'b0;
end 
// expected count[ 6 ]
initial
begin
	count_expected[6] = 1'bX;
	count_expected[6] = #999000 1'b0;
end 
// expected count[ 5 ]
initial
begin
	count_expected[5] = 1'bX;
	count_expected[5] = #999000 1'b0;
end 
// expected count[ 4 ]
initial
begin
	count_expected[4] = 1'bX;
	count_expected[4] = #999000 1'b0;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
	count_expected[3] = #999000 1'b0;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
	count_expected[2] = #999000 1'b0;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
	count_expected[1] = #999000 1'b0;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
	count_expected[0] = #999000 1'b0;
end 

// expected casout
initial
begin
	casout_expected = 1'bX;
	casout_expected = #999000 1'b0;
end 
// generate trigger
always @(casout_expected or casout or count_expected or count)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected casout = %b | expected count = %b | ",casout_expected_prev,count_expected_prev);
	$display("| real casout = %b | real count = %b | ",casout_prev,count_prev);
`endif
	if (
		( casout_expected_prev !== 1'bx ) && ( casout_prev !== casout_expected_prev )
		&& ((casout_expected_prev !== last_casout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port casout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", casout_expected_prev);
		$display ("     Real value = %b", casout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_casout_exp = casout_expected_prev;
	end
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( count_expected_prev[4] !== 1'bx ) && ( count_prev[4] !== count_expected_prev[4] )
		&& ((count_expected_prev[4] !== last_count_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[4] = count_expected_prev[4];
	end
	if (
		( count_expected_prev[5] !== 1'bx ) && ( count_prev[5] !== count_expected_prev[5] )
		&& ((count_expected_prev[5] !== last_count_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[5] = count_expected_prev[5];
	end
	if (
		( count_expected_prev[6] !== 1'bx ) && ( count_prev[6] !== count_expected_prev[6] )
		&& ((count_expected_prev[6] !== last_count_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[6] = count_expected_prev[6];
	end
	if (
		( count_expected_prev[7] !== 1'bx ) && ( count_prev[7] !== count_expected_prev[7] )
		&& ((count_expected_prev[7] !== last_count_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[7] = count_expected_prev[7];
	end
	if (
		( count_expected_prev[8] !== 1'bx ) && ( count_prev[8] !== count_expected_prev[8] )
		&& ((count_expected_prev[8] !== last_count_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[8] = count_expected_prev[8];
	end
	if (
		( count_expected_prev[9] !== 1'bx ) && ( count_prev[9] !== count_expected_prev[9] )
		&& ((count_expected_prev[9] !== last_count_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[9] = count_expected_prev[9];
	end
	if (
		( count_expected_prev[10] !== 1'bx ) && ( count_prev[10] !== count_expected_prev[10] )
		&& ((count_expected_prev[10] !== last_count_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[10] = count_expected_prev[10];
	end
	if (
		( count_expected_prev[11] !== 1'bx ) && ( count_prev[11] !== count_expected_prev[11] )
		&& ((count_expected_prev[11] !== last_count_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_exp[11] = count_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD_cascading_counter_12bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg casin;
reg clk;
reg reset;
// wires                                               
wire casout;
wire [11:0] count;

wire sampler;                             

// assign statements (if any)                          
BCD_cascading_counter_12bit i1 (
// port map - connection between master ports and signals/registers   
	.casin(casin),
	.casout(casout),
	.clk(clk),
	.count(count),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #30000 1'b1;
end 

// casin
initial
begin
	casin = 1'b0;
	casin = #70000 1'b1;
end 

BCD_cascading_counter_12bit_vlg_sample_tst tb_sample (
	.casin(casin),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

BCD_cascading_counter_12bit_vlg_check_tst tb_out(
	.casout(casout),
	.count(count),
	.sampler_rx(sampler)
);
endmodule

