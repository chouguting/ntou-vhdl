// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2021 20:06:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    breathing_light_5sec
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module breathing_light_5sec_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module breathing_light_5sec_vlg_check_tst (
	clk_102Hz,
	div_490196_counter,
	led_counter,
	light_out,
	pwm_counter,
	pwm_num,
	sampler_rx
);
input  clk_102Hz;
input [18:0] div_490196_counter;
input [8:0] led_counter;
input  light_out;
input [7:0] pwm_counter;
input [7:0] pwm_num;
input sampler_rx;

reg  clk_102Hz_expected;
reg [18:0] div_490196_counter_expected;
reg [8:0] led_counter_expected;
reg  light_out_expected;
reg [7:0] pwm_counter_expected;
reg [7:0] pwm_num_expected;

reg  clk_102Hz_prev;
reg [18:0] div_490196_counter_prev;
reg [8:0] led_counter_prev;
reg  light_out_prev;
reg [7:0] pwm_counter_prev;
reg [7:0] pwm_num_prev;

reg  clk_102Hz_expected_prev;
reg [18:0] div_490196_counter_expected_prev;
reg [8:0] led_counter_expected_prev;
reg  light_out_expected_prev;
reg [7:0] pwm_counter_expected_prev;
reg [7:0] pwm_num_expected_prev;

reg  last_clk_102Hz_exp;
reg [18:0] last_div_490196_counter_exp;
reg [8:0] last_led_counter_exp;
reg  last_light_out_exp;
reg [7:0] last_pwm_counter_exp;
reg [7:0] last_pwm_num_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_102Hz_prev = clk_102Hz;
	div_490196_counter_prev = div_490196_counter;
	led_counter_prev = led_counter;
	light_out_prev = light_out;
	pwm_counter_prev = pwm_counter;
	pwm_num_prev = pwm_num;
end

// update expected /o prevs

always @(trigger)
begin
	clk_102Hz_expected_prev = clk_102Hz_expected;
	div_490196_counter_expected_prev = div_490196_counter_expected;
	led_counter_expected_prev = led_counter_expected;
	light_out_expected_prev = light_out_expected;
	pwm_counter_expected_prev = pwm_counter_expected;
	pwm_num_expected_prev = pwm_num_expected;
end



// expected clk_102Hz
initial
begin
	clk_102Hz_expected = 1'bX;
	clk_102Hz_expected = #9999000 1'b0;
end 
// expected div_490196_counter[ 18 ]
initial
begin
	div_490196_counter_expected[18] = 1'bX;
	div_490196_counter_expected[18] = #9999000 1'b0;
end 
// expected div_490196_counter[ 17 ]
initial
begin
	div_490196_counter_expected[17] = 1'bX;
	div_490196_counter_expected[17] = #9999000 1'b0;
end 
// expected div_490196_counter[ 16 ]
initial
begin
	div_490196_counter_expected[16] = 1'bX;
	div_490196_counter_expected[16] = #9999000 1'b0;
end 
// expected div_490196_counter[ 15 ]
initial
begin
	div_490196_counter_expected[15] = 1'bX;
	div_490196_counter_expected[15] = #9999000 1'b0;
end 
// expected div_490196_counter[ 14 ]
initial
begin
	div_490196_counter_expected[14] = 1'bX;
	div_490196_counter_expected[14] = #9999000 1'b0;
end 
// expected div_490196_counter[ 13 ]
initial
begin
	div_490196_counter_expected[13] = 1'bX;
	div_490196_counter_expected[13] = #9999000 1'b0;
end 
// expected div_490196_counter[ 12 ]
initial
begin
	div_490196_counter_expected[12] = 1'bX;
	div_490196_counter_expected[12] = #9999000 1'b0;
end 
// expected div_490196_counter[ 11 ]
initial
begin
	div_490196_counter_expected[11] = 1'bX;
	div_490196_counter_expected[11] = #9999000 1'b0;
end 
// expected div_490196_counter[ 10 ]
initial
begin
	div_490196_counter_expected[10] = 1'bX;
	div_490196_counter_expected[10] = #9999000 1'b0;
end 
// expected div_490196_counter[ 9 ]
initial
begin
	div_490196_counter_expected[9] = 1'bX;
	div_490196_counter_expected[9] = #9999000 1'b0;
end 
// expected div_490196_counter[ 8 ]
initial
begin
	div_490196_counter_expected[8] = 1'bX;
	div_490196_counter_expected[8] = #9999000 1'b0;
end 
// expected div_490196_counter[ 7 ]
initial
begin
	div_490196_counter_expected[7] = 1'bX;
	div_490196_counter_expected[7] = #9999000 1'b0;
end 
// expected div_490196_counter[ 6 ]
initial
begin
	div_490196_counter_expected[6] = 1'bX;
	div_490196_counter_expected[6] = #9999000 1'b0;
end 
// expected div_490196_counter[ 5 ]
initial
begin
	div_490196_counter_expected[5] = 1'bX;
	div_490196_counter_expected[5] = #9999000 1'b0;
end 
// expected div_490196_counter[ 4 ]
initial
begin
	div_490196_counter_expected[4] = 1'bX;
	div_490196_counter_expected[4] = #9999000 1'b0;
end 
// expected div_490196_counter[ 3 ]
initial
begin
	div_490196_counter_expected[3] = 1'bX;
	div_490196_counter_expected[3] = #9999000 1'b0;
end 
// expected div_490196_counter[ 2 ]
initial
begin
	div_490196_counter_expected[2] = 1'bX;
	div_490196_counter_expected[2] = #9999000 1'b0;
end 
// expected div_490196_counter[ 1 ]
initial
begin
	div_490196_counter_expected[1] = 1'bX;
	div_490196_counter_expected[1] = #9999000 1'b0;
end 
// expected div_490196_counter[ 0 ]
initial
begin
	div_490196_counter_expected[0] = 1'bX;
	div_490196_counter_expected[0] = #9999000 1'b0;
end 
// expected led_counter[ 8 ]
initial
begin
	led_counter_expected[8] = 1'bX;
	led_counter_expected[8] = #9999000 1'b0;
end 
// expected led_counter[ 7 ]
initial
begin
	led_counter_expected[7] = 1'bX;
	led_counter_expected[7] = #9999000 1'b0;
end 
// expected led_counter[ 6 ]
initial
begin
	led_counter_expected[6] = 1'bX;
	led_counter_expected[6] = #9999000 1'b0;
end 
// expected led_counter[ 5 ]
initial
begin
	led_counter_expected[5] = 1'bX;
	led_counter_expected[5] = #9999000 1'b0;
end 
// expected led_counter[ 4 ]
initial
begin
	led_counter_expected[4] = 1'bX;
	led_counter_expected[4] = #9999000 1'b0;
end 
// expected led_counter[ 3 ]
initial
begin
	led_counter_expected[3] = 1'bX;
	led_counter_expected[3] = #9999000 1'b0;
end 
// expected led_counter[ 2 ]
initial
begin
	led_counter_expected[2] = 1'bX;
	led_counter_expected[2] = #9999000 1'b0;
end 
// expected led_counter[ 1 ]
initial
begin
	led_counter_expected[1] = 1'bX;
	led_counter_expected[1] = #9999000 1'b0;
end 
// expected led_counter[ 0 ]
initial
begin
	led_counter_expected[0] = 1'bX;
	led_counter_expected[0] = #9999000 1'b0;
end 
// expected pwm_counter[ 7 ]
initial
begin
	pwm_counter_expected[7] = 1'bX;
	pwm_counter_expected[7] = #9999000 1'b0;
end 
// expected pwm_counter[ 6 ]
initial
begin
	pwm_counter_expected[6] = 1'bX;
	pwm_counter_expected[6] = #9999000 1'b0;
end 
// expected pwm_counter[ 5 ]
initial
begin
	pwm_counter_expected[5] = 1'bX;
	pwm_counter_expected[5] = #9999000 1'b0;
end 
// expected pwm_counter[ 4 ]
initial
begin
	pwm_counter_expected[4] = 1'bX;
	pwm_counter_expected[4] = #9999000 1'b0;
end 
// expected pwm_counter[ 3 ]
initial
begin
	pwm_counter_expected[3] = 1'bX;
	pwm_counter_expected[3] = #9999000 1'b0;
end 
// expected pwm_counter[ 2 ]
initial
begin
	pwm_counter_expected[2] = 1'bX;
	pwm_counter_expected[2] = #9999000 1'b0;
end 
// expected pwm_counter[ 1 ]
initial
begin
	pwm_counter_expected[1] = 1'bX;
	pwm_counter_expected[1] = #9999000 1'b0;
end 
// expected pwm_counter[ 0 ]
initial
begin
	pwm_counter_expected[0] = 1'bX;
	pwm_counter_expected[0] = #9999000 1'b0;
end 
// expected pwm_num[ 7 ]
initial
begin
	pwm_num_expected[7] = 1'bX;
	pwm_num_expected[7] = #9999000 1'b0;
end 
// expected pwm_num[ 6 ]
initial
begin
	pwm_num_expected[6] = 1'bX;
	pwm_num_expected[6] = #9999000 1'b0;
end 
// expected pwm_num[ 5 ]
initial
begin
	pwm_num_expected[5] = 1'bX;
	pwm_num_expected[5] = #9999000 1'b0;
end 
// expected pwm_num[ 4 ]
initial
begin
	pwm_num_expected[4] = 1'bX;
	pwm_num_expected[4] = #9999000 1'b0;
end 
// expected pwm_num[ 3 ]
initial
begin
	pwm_num_expected[3] = 1'bX;
	pwm_num_expected[3] = #9999000 1'b0;
end 
// expected pwm_num[ 2 ]
initial
begin
	pwm_num_expected[2] = 1'bX;
	pwm_num_expected[2] = #9999000 1'b0;
end 
// expected pwm_num[ 1 ]
initial
begin
	pwm_num_expected[1] = 1'bX;
	pwm_num_expected[1] = #9999000 1'b0;
end 
// expected pwm_num[ 0 ]
initial
begin
	pwm_num_expected[0] = 1'bX;
	pwm_num_expected[0] = #9999000 1'b0;
end 

// expected light_out
initial
begin
	light_out_expected = 1'bX;
	light_out_expected = #9999000 1'b0;
end 
// generate trigger
always @(clk_102Hz_expected or clk_102Hz or div_490196_counter_expected or div_490196_counter or led_counter_expected or led_counter or light_out_expected or light_out or pwm_counter_expected or pwm_counter or pwm_num_expected or pwm_num)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_102Hz = %b | expected div_490196_counter = %b | expected led_counter = %b | expected light_out = %b | expected pwm_counter = %b | expected pwm_num = %b | ",clk_102Hz_expected_prev,div_490196_counter_expected_prev,led_counter_expected_prev,light_out_expected_prev,pwm_counter_expected_prev,pwm_num_expected_prev);
	$display("| real clk_102Hz = %b | real div_490196_counter = %b | real led_counter = %b | real light_out = %b | real pwm_counter = %b | real pwm_num = %b | ",clk_102Hz_prev,div_490196_counter_prev,led_counter_prev,light_out_prev,pwm_counter_prev,pwm_num_prev);
`endif
	if (
		( clk_102Hz_expected_prev !== 1'bx ) && ( clk_102Hz_prev !== clk_102Hz_expected_prev )
		&& ((clk_102Hz_expected_prev !== last_clk_102Hz_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_102Hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_102Hz_expected_prev);
		$display ("     Real value = %b", clk_102Hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_102Hz_exp = clk_102Hz_expected_prev;
	end
	if (
		( div_490196_counter_expected_prev[0] !== 1'bx ) && ( div_490196_counter_prev[0] !== div_490196_counter_expected_prev[0] )
		&& ((div_490196_counter_expected_prev[0] !== last_div_490196_counter_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[0] = div_490196_counter_expected_prev[0];
	end
	if (
		( div_490196_counter_expected_prev[1] !== 1'bx ) && ( div_490196_counter_prev[1] !== div_490196_counter_expected_prev[1] )
		&& ((div_490196_counter_expected_prev[1] !== last_div_490196_counter_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[1] = div_490196_counter_expected_prev[1];
	end
	if (
		( div_490196_counter_expected_prev[2] !== 1'bx ) && ( div_490196_counter_prev[2] !== div_490196_counter_expected_prev[2] )
		&& ((div_490196_counter_expected_prev[2] !== last_div_490196_counter_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[2] = div_490196_counter_expected_prev[2];
	end
	if (
		( div_490196_counter_expected_prev[3] !== 1'bx ) && ( div_490196_counter_prev[3] !== div_490196_counter_expected_prev[3] )
		&& ((div_490196_counter_expected_prev[3] !== last_div_490196_counter_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[3] = div_490196_counter_expected_prev[3];
	end
	if (
		( div_490196_counter_expected_prev[4] !== 1'bx ) && ( div_490196_counter_prev[4] !== div_490196_counter_expected_prev[4] )
		&& ((div_490196_counter_expected_prev[4] !== last_div_490196_counter_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[4] = div_490196_counter_expected_prev[4];
	end
	if (
		( div_490196_counter_expected_prev[5] !== 1'bx ) && ( div_490196_counter_prev[5] !== div_490196_counter_expected_prev[5] )
		&& ((div_490196_counter_expected_prev[5] !== last_div_490196_counter_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[5] = div_490196_counter_expected_prev[5];
	end
	if (
		( div_490196_counter_expected_prev[6] !== 1'bx ) && ( div_490196_counter_prev[6] !== div_490196_counter_expected_prev[6] )
		&& ((div_490196_counter_expected_prev[6] !== last_div_490196_counter_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[6] = div_490196_counter_expected_prev[6];
	end
	if (
		( div_490196_counter_expected_prev[7] !== 1'bx ) && ( div_490196_counter_prev[7] !== div_490196_counter_expected_prev[7] )
		&& ((div_490196_counter_expected_prev[7] !== last_div_490196_counter_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[7] = div_490196_counter_expected_prev[7];
	end
	if (
		( div_490196_counter_expected_prev[8] !== 1'bx ) && ( div_490196_counter_prev[8] !== div_490196_counter_expected_prev[8] )
		&& ((div_490196_counter_expected_prev[8] !== last_div_490196_counter_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[8] = div_490196_counter_expected_prev[8];
	end
	if (
		( div_490196_counter_expected_prev[9] !== 1'bx ) && ( div_490196_counter_prev[9] !== div_490196_counter_expected_prev[9] )
		&& ((div_490196_counter_expected_prev[9] !== last_div_490196_counter_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[9] = div_490196_counter_expected_prev[9];
	end
	if (
		( div_490196_counter_expected_prev[10] !== 1'bx ) && ( div_490196_counter_prev[10] !== div_490196_counter_expected_prev[10] )
		&& ((div_490196_counter_expected_prev[10] !== last_div_490196_counter_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[10] = div_490196_counter_expected_prev[10];
	end
	if (
		( div_490196_counter_expected_prev[11] !== 1'bx ) && ( div_490196_counter_prev[11] !== div_490196_counter_expected_prev[11] )
		&& ((div_490196_counter_expected_prev[11] !== last_div_490196_counter_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[11] = div_490196_counter_expected_prev[11];
	end
	if (
		( div_490196_counter_expected_prev[12] !== 1'bx ) && ( div_490196_counter_prev[12] !== div_490196_counter_expected_prev[12] )
		&& ((div_490196_counter_expected_prev[12] !== last_div_490196_counter_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[12] = div_490196_counter_expected_prev[12];
	end
	if (
		( div_490196_counter_expected_prev[13] !== 1'bx ) && ( div_490196_counter_prev[13] !== div_490196_counter_expected_prev[13] )
		&& ((div_490196_counter_expected_prev[13] !== last_div_490196_counter_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[13] = div_490196_counter_expected_prev[13];
	end
	if (
		( div_490196_counter_expected_prev[14] !== 1'bx ) && ( div_490196_counter_prev[14] !== div_490196_counter_expected_prev[14] )
		&& ((div_490196_counter_expected_prev[14] !== last_div_490196_counter_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[14] = div_490196_counter_expected_prev[14];
	end
	if (
		( div_490196_counter_expected_prev[15] !== 1'bx ) && ( div_490196_counter_prev[15] !== div_490196_counter_expected_prev[15] )
		&& ((div_490196_counter_expected_prev[15] !== last_div_490196_counter_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[15] = div_490196_counter_expected_prev[15];
	end
	if (
		( div_490196_counter_expected_prev[16] !== 1'bx ) && ( div_490196_counter_prev[16] !== div_490196_counter_expected_prev[16] )
		&& ((div_490196_counter_expected_prev[16] !== last_div_490196_counter_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[16] = div_490196_counter_expected_prev[16];
	end
	if (
		( div_490196_counter_expected_prev[17] !== 1'bx ) && ( div_490196_counter_prev[17] !== div_490196_counter_expected_prev[17] )
		&& ((div_490196_counter_expected_prev[17] !== last_div_490196_counter_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[17] = div_490196_counter_expected_prev[17];
	end
	if (
		( div_490196_counter_expected_prev[18] !== 1'bx ) && ( div_490196_counter_prev[18] !== div_490196_counter_expected_prev[18] )
		&& ((div_490196_counter_expected_prev[18] !== last_div_490196_counter_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_490196_counter[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_490196_counter_expected_prev);
		$display ("     Real value = %b", div_490196_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_490196_counter_exp[18] = div_490196_counter_expected_prev[18];
	end
	if (
		( led_counter_expected_prev[0] !== 1'bx ) && ( led_counter_prev[0] !== led_counter_expected_prev[0] )
		&& ((led_counter_expected_prev[0] !== last_led_counter_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[0] = led_counter_expected_prev[0];
	end
	if (
		( led_counter_expected_prev[1] !== 1'bx ) && ( led_counter_prev[1] !== led_counter_expected_prev[1] )
		&& ((led_counter_expected_prev[1] !== last_led_counter_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[1] = led_counter_expected_prev[1];
	end
	if (
		( led_counter_expected_prev[2] !== 1'bx ) && ( led_counter_prev[2] !== led_counter_expected_prev[2] )
		&& ((led_counter_expected_prev[2] !== last_led_counter_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[2] = led_counter_expected_prev[2];
	end
	if (
		( led_counter_expected_prev[3] !== 1'bx ) && ( led_counter_prev[3] !== led_counter_expected_prev[3] )
		&& ((led_counter_expected_prev[3] !== last_led_counter_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[3] = led_counter_expected_prev[3];
	end
	if (
		( led_counter_expected_prev[4] !== 1'bx ) && ( led_counter_prev[4] !== led_counter_expected_prev[4] )
		&& ((led_counter_expected_prev[4] !== last_led_counter_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[4] = led_counter_expected_prev[4];
	end
	if (
		( led_counter_expected_prev[5] !== 1'bx ) && ( led_counter_prev[5] !== led_counter_expected_prev[5] )
		&& ((led_counter_expected_prev[5] !== last_led_counter_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[5] = led_counter_expected_prev[5];
	end
	if (
		( led_counter_expected_prev[6] !== 1'bx ) && ( led_counter_prev[6] !== led_counter_expected_prev[6] )
		&& ((led_counter_expected_prev[6] !== last_led_counter_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[6] = led_counter_expected_prev[6];
	end
	if (
		( led_counter_expected_prev[7] !== 1'bx ) && ( led_counter_prev[7] !== led_counter_expected_prev[7] )
		&& ((led_counter_expected_prev[7] !== last_led_counter_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[7] = led_counter_expected_prev[7];
	end
	if (
		( led_counter_expected_prev[8] !== 1'bx ) && ( led_counter_prev[8] !== led_counter_expected_prev[8] )
		&& ((led_counter_expected_prev[8] !== last_led_counter_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_counter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_counter_expected_prev);
		$display ("     Real value = %b", led_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_counter_exp[8] = led_counter_expected_prev[8];
	end
	if (
		( light_out_expected_prev !== 1'bx ) && ( light_out_prev !== light_out_expected_prev )
		&& ((light_out_expected_prev !== last_light_out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_out_expected_prev);
		$display ("     Real value = %b", light_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_light_out_exp = light_out_expected_prev;
	end
	if (
		( pwm_counter_expected_prev[0] !== 1'bx ) && ( pwm_counter_prev[0] !== pwm_counter_expected_prev[0] )
		&& ((pwm_counter_expected_prev[0] !== last_pwm_counter_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[0] = pwm_counter_expected_prev[0];
	end
	if (
		( pwm_counter_expected_prev[1] !== 1'bx ) && ( pwm_counter_prev[1] !== pwm_counter_expected_prev[1] )
		&& ((pwm_counter_expected_prev[1] !== last_pwm_counter_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[1] = pwm_counter_expected_prev[1];
	end
	if (
		( pwm_counter_expected_prev[2] !== 1'bx ) && ( pwm_counter_prev[2] !== pwm_counter_expected_prev[2] )
		&& ((pwm_counter_expected_prev[2] !== last_pwm_counter_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[2] = pwm_counter_expected_prev[2];
	end
	if (
		( pwm_counter_expected_prev[3] !== 1'bx ) && ( pwm_counter_prev[3] !== pwm_counter_expected_prev[3] )
		&& ((pwm_counter_expected_prev[3] !== last_pwm_counter_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[3] = pwm_counter_expected_prev[3];
	end
	if (
		( pwm_counter_expected_prev[4] !== 1'bx ) && ( pwm_counter_prev[4] !== pwm_counter_expected_prev[4] )
		&& ((pwm_counter_expected_prev[4] !== last_pwm_counter_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[4] = pwm_counter_expected_prev[4];
	end
	if (
		( pwm_counter_expected_prev[5] !== 1'bx ) && ( pwm_counter_prev[5] !== pwm_counter_expected_prev[5] )
		&& ((pwm_counter_expected_prev[5] !== last_pwm_counter_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[5] = pwm_counter_expected_prev[5];
	end
	if (
		( pwm_counter_expected_prev[6] !== 1'bx ) && ( pwm_counter_prev[6] !== pwm_counter_expected_prev[6] )
		&& ((pwm_counter_expected_prev[6] !== last_pwm_counter_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[6] = pwm_counter_expected_prev[6];
	end
	if (
		( pwm_counter_expected_prev[7] !== 1'bx ) && ( pwm_counter_prev[7] !== pwm_counter_expected_prev[7] )
		&& ((pwm_counter_expected_prev[7] !== last_pwm_counter_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_counter_expected_prev);
		$display ("     Real value = %b", pwm_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pwm_counter_exp[7] = pwm_counter_expected_prev[7];
	end
	if (
		( pwm_num_expected_prev[0] !== 1'bx ) && ( pwm_num_prev[0] !== pwm_num_expected_prev[0] )
		&& ((pwm_num_expected_prev[0] !== last_pwm_num_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[0] = pwm_num_expected_prev[0];
	end
	if (
		( pwm_num_expected_prev[1] !== 1'bx ) && ( pwm_num_prev[1] !== pwm_num_expected_prev[1] )
		&& ((pwm_num_expected_prev[1] !== last_pwm_num_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[1] = pwm_num_expected_prev[1];
	end
	if (
		( pwm_num_expected_prev[2] !== 1'bx ) && ( pwm_num_prev[2] !== pwm_num_expected_prev[2] )
		&& ((pwm_num_expected_prev[2] !== last_pwm_num_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[2] = pwm_num_expected_prev[2];
	end
	if (
		( pwm_num_expected_prev[3] !== 1'bx ) && ( pwm_num_prev[3] !== pwm_num_expected_prev[3] )
		&& ((pwm_num_expected_prev[3] !== last_pwm_num_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[3] = pwm_num_expected_prev[3];
	end
	if (
		( pwm_num_expected_prev[4] !== 1'bx ) && ( pwm_num_prev[4] !== pwm_num_expected_prev[4] )
		&& ((pwm_num_expected_prev[4] !== last_pwm_num_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[4] = pwm_num_expected_prev[4];
	end
	if (
		( pwm_num_expected_prev[5] !== 1'bx ) && ( pwm_num_prev[5] !== pwm_num_expected_prev[5] )
		&& ((pwm_num_expected_prev[5] !== last_pwm_num_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[5] = pwm_num_expected_prev[5];
	end
	if (
		( pwm_num_expected_prev[6] !== 1'bx ) && ( pwm_num_prev[6] !== pwm_num_expected_prev[6] )
		&& ((pwm_num_expected_prev[6] !== last_pwm_num_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[6] = pwm_num_expected_prev[6];
	end
	if (
		( pwm_num_expected_prev[7] !== 1'bx ) && ( pwm_num_prev[7] !== pwm_num_expected_prev[7] )
		&& ((pwm_num_expected_prev[7] !== last_pwm_num_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_num[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_num_expected_prev);
		$display ("     Real value = %b", pwm_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pwm_num_exp[7] = pwm_num_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module breathing_light_5sec_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire clk_102Hz;
wire [18:0] div_490196_counter;
wire [8:0] led_counter;
wire light_out;
wire [7:0] pwm_counter;
wire [7:0] pwm_num;

wire sampler;                             

// assign statements (if any)                          
breathing_light_5sec i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_102Hz(clk_102Hz),
	.div_490196_counter(div_490196_counter),
	.led_counter(led_counter),
	.light_out(light_out),
	.pwm_counter(pwm_counter),
	.pwm_num(pwm_num),
	.reset(reset)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

breathing_light_5sec_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

breathing_light_5sec_vlg_check_tst tb_out(
	.clk_102Hz(clk_102Hz),
	.div_490196_counter(div_490196_counter),
	.led_counter(led_counter),
	.light_out(light_out),
	.pwm_counter(pwm_counter),
	.pwm_num(pwm_num),
	.sampler_rx(sampler)
);
endmodule

