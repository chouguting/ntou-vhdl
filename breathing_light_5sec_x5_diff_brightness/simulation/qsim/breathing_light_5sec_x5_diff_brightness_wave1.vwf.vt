// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2021 21:38:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    breathing_light_5sec_x5_diff_brightness
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module breathing_light_5sec_x5_diff_brightness_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module breathing_light_5sec_x5_diff_brightness_vlg_check_tst (
	light_out,
	pwm0,
	pwm1,
	pwm2,
	pwm3,
	pwm4,
	sampler_rx
);
input [4:0] light_out;
input [7:0] pwm0;
input [7:0] pwm1;
input [7:0] pwm2;
input [7:0] pwm3;
input [7:0] pwm4;
input sampler_rx;

reg [4:0] light_out_expected;
reg [7:0] pwm0_expected;
reg [7:0] pwm1_expected;
reg [7:0] pwm2_expected;
reg [7:0] pwm3_expected;
reg [7:0] pwm4_expected;

reg [4:0] light_out_prev;
reg [7:0] pwm0_prev;
reg [7:0] pwm1_prev;
reg [7:0] pwm2_prev;
reg [7:0] pwm3_prev;
reg [7:0] pwm4_prev;

reg [7:0] pwm0_expected_prev;

reg [7:0] last_pwm0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	light_out_prev = light_out;
	pwm0_prev = pwm0;
	pwm1_prev = pwm1;
	pwm2_prev = pwm2;
	pwm3_prev = pwm3;
	pwm4_prev = pwm4;
end

// update expected /o prevs

always @(trigger)
begin
	pwm0_expected_prev = pwm0_expected;
end


// expected pwm0[ 7 ]
initial
begin
	pwm0_expected[7] = 1'bX;
	pwm0_expected[7] = #999000 1'b0;
end 
// expected pwm0[ 6 ]
initial
begin
	pwm0_expected[6] = 1'bX;
	pwm0_expected[6] = #999000 1'b0;
end 
// expected pwm0[ 5 ]
initial
begin
	pwm0_expected[5] = 1'bX;
	pwm0_expected[5] = #999000 1'b0;
end 
// expected pwm0[ 4 ]
initial
begin
	pwm0_expected[4] = 1'bX;
	pwm0_expected[4] = #999000 1'b0;
end 
// expected pwm0[ 3 ]
initial
begin
	pwm0_expected[3] = 1'bX;
	pwm0_expected[3] = #999000 1'b0;
end 
// expected pwm0[ 2 ]
initial
begin
	pwm0_expected[2] = 1'bX;
	pwm0_expected[2] = #999000 1'b0;
end 
// expected pwm0[ 1 ]
initial
begin
	pwm0_expected[1] = 1'bX;
	pwm0_expected[1] = #999000 1'b0;
end 
// expected pwm0[ 0 ]
initial
begin
	pwm0_expected[0] = 1'bX;
	pwm0_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(light_out_expected or light_out or pwm0_expected or pwm0 or pwm1_expected or pwm1 or pwm2_expected or pwm2 or pwm3_expected or pwm3 or pwm4_expected or pwm4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected light_out = %b | expected pwm0 = %b | expected pwm1 = %b | expected pwm2 = %b | expected pwm3 = %b | expected pwm4 = %b | ",light_out_expected_prev,pwm0_expected_prev,pwm1_expected_prev,pwm2_expected_prev,pwm3_expected_prev,pwm4_expected_prev);
	$display("| real light_out = %b | real pwm0 = %b | real pwm1 = %b | real pwm2 = %b | real pwm3 = %b | real pwm4 = %b | ",light_out_prev,pwm0_prev,pwm1_prev,pwm2_prev,pwm3_prev,pwm4_prev);
`endif
	if (
		( pwm0_expected_prev[0] !== 1'bx ) && ( pwm0_prev[0] !== pwm0_expected_prev[0] )
		&& ((pwm0_expected_prev[0] !== last_pwm0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[0] = pwm0_expected_prev[0];
	end
	if (
		( pwm0_expected_prev[1] !== 1'bx ) && ( pwm0_prev[1] !== pwm0_expected_prev[1] )
		&& ((pwm0_expected_prev[1] !== last_pwm0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[1] = pwm0_expected_prev[1];
	end
	if (
		( pwm0_expected_prev[2] !== 1'bx ) && ( pwm0_prev[2] !== pwm0_expected_prev[2] )
		&& ((pwm0_expected_prev[2] !== last_pwm0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[2] = pwm0_expected_prev[2];
	end
	if (
		( pwm0_expected_prev[3] !== 1'bx ) && ( pwm0_prev[3] !== pwm0_expected_prev[3] )
		&& ((pwm0_expected_prev[3] !== last_pwm0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[3] = pwm0_expected_prev[3];
	end
	if (
		( pwm0_expected_prev[4] !== 1'bx ) && ( pwm0_prev[4] !== pwm0_expected_prev[4] )
		&& ((pwm0_expected_prev[4] !== last_pwm0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[4] = pwm0_expected_prev[4];
	end
	if (
		( pwm0_expected_prev[5] !== 1'bx ) && ( pwm0_prev[5] !== pwm0_expected_prev[5] )
		&& ((pwm0_expected_prev[5] !== last_pwm0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[5] = pwm0_expected_prev[5];
	end
	if (
		( pwm0_expected_prev[6] !== 1'bx ) && ( pwm0_prev[6] !== pwm0_expected_prev[6] )
		&& ((pwm0_expected_prev[6] !== last_pwm0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[6] = pwm0_expected_prev[6];
	end
	if (
		( pwm0_expected_prev[7] !== 1'bx ) && ( pwm0_prev[7] !== pwm0_expected_prev[7] )
		&& ((pwm0_expected_prev[7] !== last_pwm0_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm0_expected_prev);
		$display ("     Real value = %b", pwm0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pwm0_exp[7] = pwm0_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#60000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module breathing_light_5sec_x5_diff_brightness_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [4:0] light_out;
wire [7:0] pwm0;
wire [7:0] pwm1;
wire [7:0] pwm2;
wire [7:0] pwm3;
wire [7:0] pwm4;

wire sampler;                             

// assign statements (if any)                          
breathing_light_5sec_x5_diff_brightness i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.light_out(light_out),
	.pwm0(pwm0),
	.pwm1(pwm1),
	.pwm2(pwm2),
	.pwm3(pwm3),
	.pwm4(pwm4),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
end 

breathing_light_5sec_x5_diff_brightness_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

breathing_light_5sec_x5_diff_brightness_vlg_check_tst tb_out(
	.light_out(light_out),
	.pwm0(pwm0),
	.pwm1(pwm1),
	.pwm2(pwm2),
	.pwm3(pwm3),
	.pwm4(pwm4),
	.sampler_rx(sampler)
);
endmodule

