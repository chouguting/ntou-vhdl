library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity generic_shift_register is
generic(bit_count:integer range 1 to 64 :=8);
port(
	D_in:in std_logic; --移入的新資料
	L_R:in std_logic; --定是左移還是右移(0代表左,1代表右)
	clk:in std_logic;
	reset:in std_logic;
	Q:out std_logic_vector(bit_count-1 downto 0) --位移暫存器的輸出
);
end generic_shift_register;

architecture sft_reg of generic_shift_register is
--mid_data_out:將資料從位移暫存器接出(給下一個狀態用)
--mid_data_in:接入位移暫存器
signal mid_data_out,mid_data_in:std_logic_vector(bit_count-1 downto 0);

component DFF is
port(
	clk:in std_logic;
	reset:in std_logic;
	D_in:in std_logic;
	D_out:out std_logic
);
end component;

begin
	shift_reg: for i in 0 to bit_count-1 generate
	DF0:	if i=0 generate
			D0:DFF port map(clk,reset,mid_data_in(0),mid_data_out(0));
		end generate DF0;
	DFx:	if i>0 generate
			Dx:DFF port map(clk,reset,mid_data_in(i),mid_data_out(0));
		end generate DFx;
	end generate shift_reg;
	
	--判斷是左移還是右移
	mid_data_in <= (mid_data_out(bit_count-2 downto 0)&D_in) when L_R='0' else
					   (D_in&mid_data_out(bit_count-1 downto 1));
end sft_reg;